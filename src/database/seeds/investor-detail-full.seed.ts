import 'dotenv/config';
import { drizzle } from 'drizzle-orm/postgres-js';
// eslint-disable-next-line @typescript-eslint/no-require-imports
const postgres = require('postgres') as unknown as (
  cn: string,
  opts?: unknown,
) => import('postgres').Sql<Record<string, unknown>>;

import {
  countries,
  investors,
  investorSnapshots,
  investorMeetings,
  investorInterests,
  investorActivities,
  investorCommunications,
} from '../schemas/investor.schema';
import { inArray } from 'drizzle-orm';

async function main() {
  const url = process.env.DATABASE_URL;
  if (!url) {
    console.error(
      'DATABASE_URL is not set. Provide it in your environment or .env file.',
    );
    process.exit(1);
  }

  const client = postgres(url, { ssl: 'require', max: 5 });
  const db = drizzle(client);

  console.log('üå± Seeding Full Investor Detail data...');

  // ==================== 1. Countries ====================
  const countryCodes = ['JP', 'HK', 'MU', 'NL', 'US', 'UK', 'FR'];
  await db
    .delete(countries)
    .where(inArray(countries.code, countryCodes))
    .execute();

  await db.insert(countries).values([
    { code: 'JP', nameKo: 'ÏùºÎ≥∏', nameEn: 'Japan' },
    { code: 'HK', nameKo: 'ÌôçÏΩ©', nameEn: 'Hong Kong' },
    { code: 'MU', nameKo: 'Î™®Î¶¨ÏÖîÏä§', nameEn: 'Mauritius' },
    { code: 'NL', nameKo: 'ÎÑ§ÎçúÎûÄÎìú', nameEn: 'Netherlands' },
    { code: 'US', nameKo: 'ÎØ∏Íµ≠', nameEn: 'United States' },
    { code: 'UK', nameKo: 'ÏòÅÍµ≠', nameEn: 'United Kingdom' },
    { code: 'FR', nameKo: 'ÌîÑÎûëÏä§', nameEn: 'France' },
  ]);

  console.log('‚úÖ Countries seeded');

  // ==================== 2. Delete existing data ====================
  await db.delete(investors).execute();
  console.log('‚úÖ Cleared existing data');

  // ==================== 3. Create all investors ====================
  // First create all parent investors
  const parentInvestors = [
    { name: 'BlackRock Investment', country: 'JP', city: 'ÎèÑÏøÑ' },
    { name: 'Fidelity Asset Management', country: 'HK', city: 'ÏôÑÏ∞®Ïù¥' },
    { name: 'Northern Trust Capital', country: 'NL', city: 'Ìè¨Ìä∏Î£®Ïù¥Ïä§' },
    { name: 'Nomura Asset Management', country: 'JP', city: 'ÎèÑÏøÑ' },
    { name: 'Vanguard Group', country: 'US', city: 'Îâ¥Ïöï' },
    { name: 'Daiwa Securities', country: 'JP', city: 'ÎèÑÏøÑ' },
    { name: 'HSBC Asset Management', country: 'HK', city: 'ÌôçÏΩ©' },
    { name: 'State Street Global Advisors', country: 'US', city: 'Î≥¥Ïä§ÌÑ¥' },
    { name: 'Sumitomo Mitsui Trust', country: 'JP', city: 'Ïò§ÏÇ¨Ïπ¥' },
    {
      name: 'Legal & General Investment Management',
      country: 'UK',
      city: 'Îü∞Îçò',
    },
  ];

  const createdInvestors: any[] = [];
  for (const inv of parentInvestors) {
    const [created] = await db
      .insert(investors)
      .values({
        name: inv.name,
        countryCode: inv.country,
        city: inv.city,
        parentId: null,
        isGroupRepresentative: true,
      })
      .returning();
    createdInvestors.push(created);
  }

  console.log(`‚úÖ Created ${createdInvestors.length} parent investors`);

  // Then create child investors
  const blackrockParent = createdInvestors.find(
    (inv) => inv.name === 'BlackRock Investment',
  );
  const fidelityParent = createdInvestors.find(
    (inv) => inv.name === 'Fidelity Asset Management',
  );

  const childInvestors = await db
    .insert(investors)
    .values([
      {
        name: 'BlackRock Japan Investment',
        parentId: blackrockParent.id,
        countryCode: 'JP',
        city: 'ÎèÑÏøÑ',
        isGroupRepresentative: false,
      },
      {
        name: 'BlackRock Japan Investment (II)',
        parentId: blackrockParent.id,
        countryCode: 'JP',
        city: 'ÎèÑÏøÑ',
        isGroupRepresentative: false,
      },
      {
        name: 'BlackRock Japan Investment (III)',
        parentId: blackrockParent.id,
        countryCode: 'JP',
        city: 'ÎèÑÏøÑ',
        isGroupRepresentative: false,
      },
      {
        name: 'Fidelity HK Limited',
        parentId: fidelityParent.id,
        countryCode: 'HK',
        city: 'ÏôÑÏ∞®Ïù¥',
        isGroupRepresentative: false,
      },
    ])
    .returning();

  console.log(`‚úÖ Created ${childInvestors.length} child investors`);

  // ==================== 4. Snapshots for all investors ====================
  const snapshotData = [
    {
      rank: 1,
      sOverO: 70,
      ord: 132675,
      adr: 169522,
      type: 'HEDGE_FUND',
      style: 'POSITIVE',
      note: 'Í∏çÏ†ïÏ†Å',
      turnover: 'LOW',
      orientation: 'ACTIVE',
    },
    {
      rank: 2,
      sOverO: 65,
      ord: 120000,
      adr: 150000,
      type: 'PENSION',
      style: 'NEUTRAL',
      note: 'Ï§ëÎ¶ΩÏ†Å',
      turnover: 'MEDIUM',
      orientation: 'ACTIVE',
    },
    {
      rank: 3,
      sOverO: 60,
      ord: 110000,
      adr: 140000,
      type: 'MUTUAL_FUND',
      style: 'POSITIVE',
      note: 'Í∏çÏ†ïÏ†Å',
      turnover: 'LOW',
      orientation: 'ACTIVE',
    },
    {
      rank: 4,
      sOverO: 58,
      ord: 105000,
      adr: 135000,
      type: 'INVESTMENT_ADVISOR',
      style: 'QUESTION_HEAVY',
      note: 'ÏßàÎ¨∏ ÎßéÏùå',
      turnover: 'HIGH',
      orientation: 'ACTIVE',
    },
    {
      rank: 5,
      sOverO: 55,
      ord: 100000,
      adr: 130000,
      type: 'HEDGE_FUND',
      style: 'POSITIVE',
      note: 'Í∏çÏ†ïÏ†Å',
      turnover: 'MEDIUM',
      orientation: 'ACTIVE',
    },
    {
      rank: 6,
      sOverO: 52,
      ord: 95000,
      adr: 125000,
      type: 'ETF',
      style: 'NEUTRAL',
      note: 'Ï§ëÎ¶ΩÏ†Å',
      turnover: 'LOW',
      orientation: 'INACTIVE',
    },
    {
      rank: 7,
      sOverO: 50,
      ord: 90000,
      adr: 120000,
      type: 'SOVEREIGN',
      style: 'PICKY',
      note: 'ÍπåÏπ†Ìï®',
      turnover: 'LOW',
      orientation: 'ACTIVE',
    },
    {
      rank: 8,
      sOverO: 48,
      ord: 85000,
      adr: 115000,
      type: 'PENSION',
      style: 'POSITIVE',
      note: 'Í∏çÏ†ïÏ†Å',
      turnover: 'MEDIUM',
      orientation: 'ACTIVE',
    },
    {
      rank: 9,
      sOverO: 45,
      ord: 80000,
      adr: 110000,
      type: 'MUTUAL_FUND',
      style: 'NEUTRAL',
      note: 'Ï§ëÎ¶ΩÏ†Å',
      turnover: 'HIGH',
      orientation: 'ACTIVE',
    },
    {
      rank: 10,
      sOverO: 42,
      ord: 75000,
      adr: 105000,
      type: 'BANK',
      style: 'NEGATIVE',
      note: 'Î∂ÄÏ†ïÏ†Å',
      turnover: 'MEDIUM',
      orientation: 'INACTIVE',
    },
  ];

  // Create snapshots for multiple quarters
  const quarters = [
    { year: 2022, quarter: 1 },
    { year: 2022, quarter: 2 },
    { year: 2022, quarter: 3 },
    { year: 2022, quarter: 4 },
    { year: 2023, quarter: 1 },
    { year: 2023, quarter: 2 },
    { year: 2023, quarter: 3 },
    { year: 2023, quarter: 4 },
    { year: 2024, quarter: 1 },
    { year: 2024, quarter: 2 },
    { year: 2024, quarter: 3 },
    { year: 2024, quarter: 4 },
  ];

  // Create snapshots for parent investors
  for (let i = 0; i < createdInvestors.length; i++) {
    const investor = createdInvestors[i];
    if (investor.isGroupRepresentative) {
      // Calculate child count
      let childCount = 0;
      if (investor.id === blackrockParent.id) childCount = 3;
      if (investor.id === fidelityParent.id) childCount = 1;

      for (const period of quarters) {
        const baseData = snapshotData[i];
        // Add some variation by quarter
        const variation = Math.floor(Math.random() * 10) - 5;
        const month = String(period.quarter * 3).padStart(2, '0');
        await db.insert(investorSnapshots).values({
          investorId: investor.id,
          year: period.year,
          quarter: period.quarter,
          groupRank: baseData.rank,
          groupChildCount: childCount,
          sOverO: baseData.sOverO + variation,
          ord: baseData.ord + variation * 1000,
          adr: baseData.adr + variation * 1000,
          investorType: baseData.type as any,
          styleTag: baseData.style as any,
          styleNote: baseData.note,
          turnover: baseData.turnover as any,
          orientation: baseData.orientation as any,
          lastActivityAt: new Date(`${period.year}-${month}-15T14:00:00Z`),
        });
      }
    }
  }

  // Create snapshots for child investors (ÏûêÌöåÏÇ¨)
  const childSnapshotTemplate = {
    sOverO: 30,
    ord: 25000,
    adr: 30000,
    type: 'HEDGE_FUND',
    style: 'NEUTRAL',
    note: 'Ï§ëÎ¶ΩÏ†Å',
    turnover: 'MEDIUM',
    orientation: 'ACTIVE',
  };

  for (const child of childInvestors) {
    for (const period of quarters) {
      const variation = Math.floor(Math.random() * 10) - 5;
      const month = String(period.quarter * 3).padStart(2, '0');
      await db.insert(investorSnapshots).values({
        investorId: child.id,
        year: period.year,
        quarter: period.quarter,
        groupRank: null, // ÏûêÌöåÏÇ¨Îäî Îû≠ÌÇπ ÏóÜÏùå
        groupChildCount: null,
        sOverO: childSnapshotTemplate.sOverO + variation,
        ord: childSnapshotTemplate.ord + variation * 500,
        adr: childSnapshotTemplate.adr + variation * 500,
        investorType: childSnapshotTemplate.type as any,
        styleTag: childSnapshotTemplate.style as any,
        styleNote: childSnapshotTemplate.note,
        turnover: childSnapshotTemplate.turnover as any,
        orientation: childSnapshotTemplate.orientation as any,
        lastActivityAt: new Date(`${period.year}-${month}-15T14:00:00Z`),
      });
    }
  }

  console.log('‚úÖ Snapshots created for all periods (parents + children)');

  // ==================== 5. Meetings for each investor ====================
  const meetingTemplates = [
    {
      type: 'One-on-One',
      topic: 'ÎπÑÎåÄÎ©¥',
      participants: 'John Smith',
      tags: ['ÏòÅÏóÖÌòÑÌô©', 'ÏàòÏ£ºÌòÑÌô©', 'CETI Îß§Ï∂ú'],
      rate: '+5.2%',
    },
    {
      type: 'NDR',
      topic: 'CEO, ÎπÑÎåÄÎ©¥, IRÎπÑÎåÄÎ©¥',
      participants: 'Harold Kim, Rahul Patel',
      tags: ['ÏòÅÏóÖÌòÑÌô©', 'Ïû¨Î¨¥Ï†úÌëú', 'Ìà¨ÏûêÏ†ÑÎûµ'],
      rate: '-2.1%',
    },
    {
      type: 'Conference',
      topic: 'Î∞©Î¨∏ÌòïÌÉú',
      participants: 'Sarah Johnson',
      tags: ['ÏãúÏû•Ï†ÑÎßù', 'ESG Ï†ÑÎûµ', 'ÏàòÏùµÏÑ±'],
      rate: '+3.5%',
    },
    {
      type: 'One-on-One',
      topic: 'CEO Î∞©Î¨∏',
      participants: 'Michael Chen',
      tags: ['Ïã†Í∑úÏÇ¨ÏóÖ', 'ÏÑ±Ïû•ÏÑ±', 'Î∞∞ÎãπÏ†ïÏ±Ö'],
      rate: '+1.8%',
    },
    {
      type: 'Lunch Meeting',
      topic: 'Ï£ºÏ£ºÏ¥ùÌöå',
      participants: 'Emily Park',
      tags: ['Í≤ΩÏòÅÍ∂å', 'Ï£ºÏ£ºÌôòÏõê', 'ÏûêÎ≥∏ÎπÑÏö©'],
      rate: '-0.5%',
    },
  ];

  for (const investor of createdInvestors) {
    if (investor.isGroupRepresentative) {
      for (let i = 0; i < 3; i++) {
        const template = meetingTemplates[i % meetingTemplates.length];
        const month = String(9 - i).padStart(2, '0');
        const day = String(15 + i).padStart(2, '0');
        await db.insert(investorMeetings).values({
          investorId: investor.id,
          meetingDate: new Date(`2025-${month}-${day}T14:00:00Z`),
          meetingType: template.type,
          topic: template.topic,
          participants: template.participants,
          tags: template.tags,
          changeRate: template.rate,
        });
      }
    }
  }

  console.log('‚úÖ Meetings created');

  // ==================== 6. Interests for each investor ====================
  const interestTopics = [
    [
      'Ï£ºÏ£ºÌôòÏõê',
      'ÌÉëÏßÅ Î¶¨Ïä§ÌÅ¨',
      'Í≤ΩÏòÅÍ∂å',
      'ÏÑ±Ïû•ÏÑ±',
      'ÏûêÎ≥∏ÎπÑÏö©',
      'ÏàòÏùµÏÑ±',
      'ÏùºÎ∞ò Í¥ÄÎ¶¨ÎπÑ',
    ],
    [
      'ESG Ï†ÑÎûµ',
      'Î∞∞ÎãπÏ†ïÏ±Ö',
      'ÏãúÏû•Ï†êÏú†Ïú®',
      'Ïã†Í∑úÏÇ¨ÏóÖ',
      'Ïû¨Î¨¥Íµ¨Ï°∞',
      'ÏòÅÏóÖÏù¥Ïùµ',
      'Ìà¨ÏûêÏ†ÑÎûµ',
    ],
    [
      'Í≤ΩÏòÅÏßÑ ÍµêÏ≤¥',
      'ÏÇ¨ÏóÖÎã§Í∞ÅÌôî',
      'Î¶¨Ïä§ÌÅ¨ Í¥ÄÎ¶¨',
      'Îß§Ï∂úÏÑ±Ïû•',
      'ÎπÑÏö©Ï†àÍ∞ê',
      'ÌòÑÍ∏àÌùêÎ¶Ñ',
      'ÏûêÏÇ∞Í¥ÄÎ¶¨',
    ],
    [
      'Ï£ºÍ∞Ä ÏïàÏ†ï',
      'ÏãúÏû• Ìä∏Î†åÎìú',
      'Í≤ΩÏüÅÎ†•',
      'Í∏∞Ïà†ÌòÅÏã†',
      'Í∏ÄÎ°úÎ≤å ÌôïÏû•',
      'ÏàòÏùµÍµ¨Ï°∞',
      'ÏßÄÎ∞∞Íµ¨Ï°∞',
    ],
    [
      'Î∏åÎûúÎìú Í∞ÄÏπò',
      'Í≥†Í∞ùÎßåÏ°±',
      'ÌíàÏßàÍ¥ÄÎ¶¨',
      'ÏÉùÏÇ∞ÏÑ±',
      'Ïù∏Ïû¨Ïú°ÏÑ±',
      'Ï°∞ÏßÅÎ¨∏Ìôî',
      'ÌòëÎ†•Í¥ÄÍ≥Ñ',
    ],
  ];

  for (let idx = 0; idx < createdInvestors.length; idx++) {
    const investor = createdInvestors[idx];
    if (investor.isGroupRepresentative) {
      const topics = interestTopics[idx % interestTopics.length];
      for (const topic of topics) {
        await db.insert(investorInterests).values({
          investorId: investor.id,
          topic: topic,
          frequency: Math.floor(Math.random() * 60) + 50, // 50-110
        });
      }
    }
  }

  console.log('‚úÖ Interests created');

  // ==================== 7. Activities for each investor ====================
  const activityTemplates = [
    {
      type: 'One-on-One',
      desc: 'SQ Ïã§Ï†Å Ï∑®ÏïΩ',
      participants: 'John',
      tags: ['ÏòÅÏóÖÌòÑÌô©', 'ÏàòÏ£ºÌòÑÌô©'],
      rate: '+1.2%',
    },
    {
      type: 'NDR',
      desc: 'Ïã†ÎÖÑ Ìà¨Ïûê Í≥ÑÌöç',
      participants: 'Harold',
      tags: ['Ìà¨ÏûêÏ†ÑÎûµ', 'Ìè¨Ìä∏Ìè¥Î¶¨Ïò§'],
      rate: '-5.2%',
    },
    {
      type: 'Conference',
      desc: 'Î∂ÑÍ∏∞ Ïã§Ï†Å Í≤ÄÌÜ†',
      participants: 'Sarah',
      tags: ['Ïû¨Î¨¥Ï†úÌëú', 'ÏòÅÏóÖÏù¥Ïùµ'],
      rate: '+0.8%',
    },
  ];

  for (const investor of createdInvestors) {
    if (investor.isGroupRepresentative) {
      for (let i = 0; i < 2; i++) {
        const template = activityTemplates[i % activityTemplates.length];
        const month = String(9 - i).padStart(2, '0');
        const day = String(20 + i).padStart(2, '0');
        await db.insert(investorActivities).values({
          investorId: investor.id,
          activityDate: new Date(`2025-${month}-${day}T00:00:00Z`),
          activityType: template.type,
          description: template.desc,
          participants: template.participants,
          tags: template.tags,
          changeRate: template.rate,
        });
      }
    }
  }

  console.log('‚úÖ Activities created');

  // ==================== 8. Communications for each investor ====================
  const commTemplates = [
    { type: 'ÎåÄÎ©¥ÎØ∏ÌåÖ', desc: '1Q25 ÎØ∏ÌåÖ', tags: [] },
    { type: 'ÎπÑÎåÄÎ©¥ÎØ∏ÌåÖ', desc: '2Q25 ÌôîÏÉÅÌöåÏùò', tags: [] },
    {
      type: 'One-on-One',
      desc: '3Q25 - ÏßÄÏó≠Î≥Ñ(6)',
      tags: ['Îã®ÎèÖÎßåÎÇ®', 'IR Ï†ÑÎûµ', 'ÏàòÏùµÏÑ±'],
    },
    {
      type: 'Conference',
      desc: '4Q25 Ïª®ÌçºÎü∞Ïä§',
      tags: ['ÏãúÏû•Ï†ÑÎßù', 'Ìà¨ÏûêÏ†ÑÎûµ'],
    },
  ];

  for (const investor of createdInvestors) {
    if (investor.isGroupRepresentative) {
      for (let i = 0; i < 3; i++) {
        const template = commTemplates[i % commTemplates.length];
        const month = String(i * 3 + 1).padStart(2, '0');
        await db.insert(investorCommunications).values({
          investorId: investor.id,
          communicationDate: new Date(`2025-${month}-15T00:00:00Z`),
          communicationType: template.type,
          description: template.desc,
          participants: `Participant ${i + 1}`,
          tags: template.tags,
        });
      }
    }
  }

  console.log('‚úÖ Communications created');

  console.log('üéâ Full Investor Detail seed ÏôÑÎ£å!');
  console.log('');
  console.log('üìä ÏÉùÏÑ±Îêú Îç∞Ïù¥ÌÑ∞:');
  console.log('  - Íµ≠Í∞Ä: 7Í∞ú (JP, HK, MU, NL, US, UK, FR)');
  console.log('  - Ìà¨ÏûêÏûê: 14Í∞ú (ÎåÄÌëú 10 + ÏûêÌöåÏÇ¨ 4)');
  console.log('    * BlackRock Investment (ÏûêÌöåÏÇ¨ 3Í∞ú)');
  console.log('    * Fidelity Asset Management (ÏûêÌöåÏÇ¨ 1Í∞ú)');
  console.log('  - Ïä§ÎÉÖÏÉ∑: 168Í∞ú (10Í∞ú ÎåÄÌëú √ó 12Î∂ÑÍ∏∞ + 4Í∞ú ÏûêÌöåÏÇ¨ √ó 12Î∂ÑÍ∏∞)');
  console.log('  - Î©¥Îã¥ Ïù¥Î†•: 30Í∞ú (10Í∞ú ÎåÄÌëú √ó 3Í∞úÏî©)');
  console.log('  - Í¥ÄÏã¨ÏÇ¨: 70Í∞ú (10Í∞ú ÎåÄÌëú √ó 7Í∞úÏî©)');
  console.log('  - ÌôúÎèô: 20Í∞ú (10Í∞ú ÎåÄÌëú √ó 2Í∞úÏî©)');
  console.log('  - Ïª§ÎÆ§ÎãàÏºÄÏù¥ÏÖò: 30Í∞ú (10Í∞ú ÎåÄÌëú √ó 3Í∞úÏî©)');

  await client.end({ timeout: 5 });
}

main().catch((err) => {
  console.error('‚ùå Seed Ïã§Ìå®:', err);
  process.exit(1);
});
